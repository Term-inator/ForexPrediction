"""
for data generated by GenDataset.py
"""
from datetime import datetime

import numpy as np
import pandas as pd
from gluonts.dataset.common import ListDataset
from gluonts.dataset.util import to_pandas
from gluonts.torch import DeepAREstimator
from matplotlib import pyplot as plt

dateset_name = 'Forex'
load_dict = np.load(f'./data/{dateset_name}.npy', allow_pickle=True)
# load_dict = np.load(f'{dateset_name}.npy', allow_pickle=True)
load_dict = load_dict.item()
start = load_dict['start']
print(f'Loaded {dateset_name} from {load_dict["start"].strftime("%Y/%m/%d")} to {load_dict["end"].strftime("%Y/%m/%d")}')
target = load_dict['target']
target = target.reshape(1, -1)
print(target.shape, (load_dict["end"] - start).days)
freq = load_dict['freq']

prediction_length = 7

start = pd.Period(start, freq=freq)  # can be different for each time series

# train dataset: cut the last window of length "prediction_length", add "target" and "start" fields
train_ds = ListDataset(
    [{"target": x, "start": start} for x in target[:, :-prediction_length]],
    freq=freq,
)

# test dataset: use the whole dataset, add "target" and "start" fields
test_ds = ListDataset(
    [{"target": x, "start": start} for x in target], freq=freq
)

entry = next(iter(train_ds))
train_series = to_pandas(entry)
# train_series.plot()
# plt.grid(which="both")
# plt.legend(["train series"], loc="upper left")
# plt.show()

entry = next(iter(test_ds))
test_series = to_pandas(entry)
test_series.plot()
plt.axvline(train_series.index[-1], color="r")  # end of train dataset
plt.grid(which="both")
plt.legend(["test series", "end of train series"], loc="upper left")
plt.show()

# Train the model and make predictions
model = DeepAREstimator(
    prediction_length=prediction_length, freq="D", trainer_kwargs={"max_epochs": 8}
).train(train_ds)

forecasts = list(model.predict(test_ds))

# Plot predictions
x = pd.period_range(load_dict['start'].strftime('%Y/%m/%d'), load_dict['end'].strftime('%Y/%m/%d'), freq=freq).to_numpy()
x = [p.to_timestamp() for p in x]
print(x)
plt.plot(x[:-1], target[0], color="black")
for forecast in forecasts:
    forecast.start_date = pd.Period('2023-07-03', 'D') - prediction_length
    forecast.plot()
plt.legend(["True values"], loc="upper left", fontsize="xx-large")
plt.savefig("example.png")